import { z } from 'zod';

const node_type = z.union([
  z.literal('BackgroundVideoWrapper'),
  z.literal('Block'),
  z.literal('Blockquote'),
  z.literal('Body'),
  z.literal('FormCheckboxWrapper'),
  z.literal('FormCheckboxInput'),
  z.literal('Container'),
  z.literal('Column'),
  z.literal('CommerceCartWrapper'),
  z.literal('CommerceCartOpenLink'),
  z.literal('CommerceCartOpenLinkIcon'),
  z.literal('DropdownLink'),
  z.literal('DropdownList'),
  z.literal('DropdownToggle'),
  z.literal('DropdownWrapper'),
  z.literal('DynamoEmpty'),
  z.literal('DynamoItem'),
  z.literal('DynamoList'),
  z.literal('DynamoWrapper'),
  z.literal('Facebook'),
  z.literal('Grid'),
  z.literal('HtmlEmbed'),
  z.literal('Heading'),
  z.literal('Icon'),
  z.literal('Image'),
  z.literal('FormTextInput'),
  z.literal('FormWrapper'),
  z.literal('FormForm'),
  z.literal('FormInlineLabel'),
  z.literal('FormSuccessMessage'),
  z.literal('FormErrorMessage'),
  z.literal('FormBlockLabel'),
  z.literal('LineBreak'),
  z.literal('Link'),
  z.literal('List'),
  z.literal('ListItem'),
  z.literal('LightboxWrapper'),
  z.literal('MapWidget'),
  z.literal('NavbarWrapper'),
  z.literal('NavbarContainer'),
  z.literal('NavbarBrand'),
  z.literal('NavbarMenu'),
  z.literal('NavbarLink'),
  z.literal('NavbarButton'),
  z.literal('Paragraph'),
  z.literal('FormRadioWrapper'),
  z.literal('FormRadioInput'),
  z.literal('FormReCaptcha'),
  z.literal('RichText'),
  z.literal('Row'),
  z.literal('FormSelect'),
  z.literal('SearchButton'),
  z.literal('SearchForm'),
  z.literal('SearchInput'),
  z.literal('Span'),
  z.literal('Strong'),
  z.literal('Symbol'),
  z.literal('Section'),
  z.literal('FormButton'),
  z.literal('SliderWrapper'),
  z.literal('SliderMask'),
  z.literal('SliderSlide'),
  z.literal('SliderArrow'),
  z.literal('SliderNav'),
  z.literal('TabsWrapper'),
  z.literal('TabsMenu'),
  z.literal('TabsLink'),
  z.literal('TabsContent'),
  z.literal('TabsPane'),
  z.literal('FormTextarea'),
  z.literal('Twitter'),
  z.literal('Video'),
  z.literal('YouTubeVideo'),
]);

const solution_setting_option = z.object({
  name: z.string(),
  description: z.string(),
  attributeValue: z.string(),
});

const solution_condition = z.discriminatedUnion('type', [
  z.object({
    type: z.literal('condition'),
    attributeId: z.string(),
    attributeValue: z.union([z.string(), z.number()]),
  }),
  z.object({
    type: z.literal('group'),
    operator: z.union([z.literal('or'), z.literal('and')]),
    conditions: z.any().array(),
  }),
]);

const solution_attribute = z.discriminatedUnion('optionsType', [
  z.object({
    type: z.literal('attribute'),
    id: z.string(),
    name: z.string(),
    description: z.string(),
    attributeName: z.string(),
    nodeTypes: node_type.array().optional(),
    required: z.boolean().optional(),
    conditions: solution_condition.array().optional(),
    optionsType: z.literal('checkbox'),
  }),
  z.object({
    type: z.literal('attribute'),
    id: z.string(),
    name: z.string(),
    description: z.string(),
    attributeName: z.string(),
    nodeTypes: node_type.array().optional(),
    required: z.boolean().optional(),
    conditions: solution_condition.array().optional(),
    optionsType: z.literal('dropdown'),
    attributeValue: z.string().optional(),
    options: solution_setting_option.array(),
  }),
  z.object({
    type: z.literal('attribute'),
    id: z.string(),
    name: z.string(),
    description: z.string(),
    attributeName: z.string(),
    nodeTypes: node_type.array().optional(),
    required: z.boolean().optional(),
    conditions: solution_condition.array().optional(),
    optionsType: z.literal('text-input'),
    attributeValue: z.string().optional(),
  }),
  z.object({
    type: z.literal('attribute'),
    id: z.string(),
    name: z.string(),
    description: z.string(),
    attributeName: z.string(),
    nodeTypes: node_type.array().optional(),
    required: z.boolean().optional(),
    conditions: solution_condition.array().optional(),
    optionsType: z.literal('integer-input'),
    attributeValue: z.number().optional(),
  }),
  z.object({
    type: z.literal('attribute'),
    id: z.string(),
    name: z.string(),
    description: z.string(),
    attributeName: z.string(),
    nodeTypes: node_type.array().optional(),
    required: z.boolean().optional(),
    conditions: solution_condition.array().optional(),
    optionsType: z.literal('float-input'),
    attributeValue: z.number().optional(),
  }),
]);

const solution_attributes_group = z.object({
  type: z.literal('group'),
  name: z.string(),
  attributes: solution_attribute.array(),
  nodeTypes: node_type.array().optional(),
  conditions: solution_condition.array().optional(),
});

const solution_script = z.object({
  id: z.string(),
  src: z.string(),
  defer: z.boolean().optional(),
  async: z.boolean().optional(),
  location: z.union([z.literal('head'), z.literal('body')]),
});

const solution = z.object({
  id: z.string(),
  name: z.string(),
  scripts: solution_script.array(),
  attributes: z.union([solution_attributes_group, solution_attribute]).array(),
});

export const schema = z.object({
  id: z.string(),
  name: z.string(),
  solutions: solution.array(),
});

export type Schema = z.infer<typeof schema>;
